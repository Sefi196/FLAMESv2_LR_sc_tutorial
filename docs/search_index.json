[["index.html", "Citations and Session info Chapter 1 Introduction", " Citations and Session info Sefi Prawer 2025-01-09 Chapter 1 Introduction Welcome to the FLAMES single sample tutorial! In this tutorial, we will guide you through a basic analysis of long-read single-cell RNA sequencing data. Our goal is to demonstrate how to use the output from our package, FLAMES, to create and process long-read single-cell data. Here we will focus on using Seurat and other very popular single cell tools for analysis and processing single cell data. Much of this analysis will follow standard short read single cell processing norms, yet with long read data we can also explore isoform-level expression in single cells. This can be very useful as we hope to demonstrate throughout this tutorial. This tutorial assumes that have; Run the sc_long_pipeline (to process a single sample) and have set your config file with these parameters set to TRUE “bambu_isoform_identification”: [true] “oarfish_quantification”: [true] And That you have run FLAMES to calculate the ambient RNA profile. An explanation of how to this can be found here: … [placeholder] If you wish to run through the tutorial using the data provided in the ‘data’ folder please ensure you unzip all the files. If you wish run through the tutorial using your own single sample output from FLAMES, there is no need to unzip your files please ensure you use the correct gtf. The gtf used when running FLAMES must be the same for subsequent analysis. The current version used in this tutorial can be downloaded using the following command wget https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_47/gencode.v47.annotation.gtf.gz Much of the workflow will remain the same if you decide to use other tools for quantification or isoform discovery, which FLAMES does support, but these are the tools that in our hands perform the best and what we would recommend using at this stage. This single sample tutorial will use data generated in the Clark lab. This is small dataset of approximately 400 cells. The cells are at Day55 of a excitatory neural differentiation protocol. More information on the dataset and sequencing methodology can be found here …. If you find this tutorial useful please cite our work… If you have questions or suggestions please email ‘sefi.prawer@unimelb.edu.au’ or leave a comment on this github page. "],["setup.html", "Chapter 2 Setup 2.1 load in required packages 2.2 Creating resource files. 2.3 Convert count matrices from Gene ID to gene Symbol", " Chapter 2 Setup 2.1 load in required packages #install packages if required. Note some packages require installation via bioconductor. See installation instruction for each package to ensure installation is successful. library(rtracklayer) library(Seurat) library(DropletUtils) library(gridExtra) library(data.table) library(BiocParallel) library(celda) library(SingleCellExperiment) library(DoubletFinder) library(stringr) library(cowplot) library(grid) library(patchwork) library(tidyverse) # Set working directory and create folders for output files setwd(&quot;.&quot;) # Set this to correct location dir.create(&quot;./output_files/ref_files&quot;, recursive = TRUE, showWarnings = FALSE) dir.create(&quot;./output_files/counts&quot;, recursive = TRUE, showWarnings = FALSE) dir.create(&quot;./output_files/seu_objects&quot;, recursive = TRUE, showWarnings = FALSE) dir.create(&quot;./output_files/empty_drops&quot;, recursive = TRUE, showWarnings = FALSE) dir.create(&quot;./output_files/decontx&quot;, recursive = TRUE, showWarnings = FALSE) dir.create(&quot;./output_files/QC&quot;, recursive = TRUE, showWarnings = FALSE) dir.create(&quot;./output_files/DE&quot;, recursive = TRUE, showWarnings = FALSE) 2.2 Creating resource files. To start, we’ll create a few essential files that will be used throughout the analysis. The first step is to generate a CSV file containing three key columns: ENSTID, ENSGID, and geneSymbol. This file will be used as a dictionary to rename entries in both the isoform and gene count matrices, replacing ENSGID with the corresponding gene symbol. By adopting this naming convention for ENSTID, we can easily identify the gene origin of each isoform, streamlining the interpretation and analysis of gene and isoform-level data. First lets define a helper function for this step: # Function to make csv naming resource make_isoform_gene_symbol_dict &lt;- function(FLAMES_gtf, reference_gtf, output_file) { # Import the first GTF file (transcripts GTF) gtf1 &lt;- import(FLAMES_gtf) gtf1_df &lt;- as.data.frame(gtf1) # Select relevant columns from the first GTF selected_columns1 &lt;- gtf1_df[, c(&quot;transcript_id&quot;, &quot;gene_id&quot;)] unique_selected_cols &lt;- unique(selected_columns1) # Import the second GTF file (reference GTF with gene symbols) gtf2 &lt;- import(reference_gtf) gtf2_df &lt;- as.data.frame(gtf2) # Select relevant columns from the second GTF selected_columns2 &lt;- gtf2_df[, c(&quot;gene_name&quot;, &quot;gene_id&quot;)] unique_gene_symbol &lt;- unique(selected_columns2) # Merge the two data frames on &#39;gene_id&#39; combined_data &lt;- merge(unique_selected_cols, unique_gene_symbol, by = &quot;gene_id&quot;, all.x = TRUE) # If &#39;gene_name&#39; is missing, replace it with &#39;gene_id&#39; combined_data$gene_symbol &lt;- ifelse(is.na(combined_data$gene_name), combined_data$gene_id, combined_data$gene_name) # Select relevant columns final_combined_data &lt;- combined_data[, c(&quot;transcript_id&quot;, &quot;gene_id&quot;, &quot;gene_symbol&quot;)] # Write to a CSV file write.csv(final_combined_data, file = file.path(&quot;output_files/ref_files&quot;, output_file), row.names = FALSE) return(final_combined_data) } Run this chunk to create the dictionary containing ENSTID, ENSGID, and geneSymbol information: # The FLAMES ref can be found in your selected output folder after running the Flames pipeline. FLAMES_gtf_file &lt;- &quot;./data/FLAMES_out/isoform_annotated.gtf&quot; #ensure file is unzipped reference_gtf_file &lt;- &quot;./data/gencode.v47.annotation.gtf&quot; # ensure file is unzipped output_file &lt;- &quot;isoform_gene_dict.csv&quot; # Call the helper function defined in code block above to create a dictionary containing corresponding gene information for each isoform # This may take a few minutes isoform_gene_dict &lt;- make_isoform_gene_symbol_dict(FLAMES_gtf_file, reference_gtf_file, output_file) 2.3 Convert count matrices from Gene ID to gene Symbol With the reference dictionary in place, we can now rename both our count matrix and background count matrix by converting ENSGIDs to geneSymbols. This conversion not only simplifies the interpretation of gene expression in single cells but is also necessary for some downstream tools that require gene symbols instead of ENSGIDs, such as automated cell annotation tools. Like before, lets define a generic helper function first to do this: convert_ENSGID_to_geneSymbol &lt;- function(gene_count_matrix_path, id_symbol_df = isoform_gene_dict, output_file, return_df = FALSE) { # Load the reference dictionary we made earlier - select gene-level cols id_symbol_df &lt;- id_symbol_df %&gt;% dplyr::select(gene_id, gene_symbol) # Load the data object with ENSGID row names gene_count_matrix &lt;- read.csv(gene_count_matrix_path, header = TRUE) colnames(gene_count_matrix)[1] &lt;- &quot;gene_id&quot; # Replace ENSGIDs with gene symbols in original flames gene-level count matrix formatted_gene_count_matrix &lt;- gene_count_matrix %&gt;% merge(id_symbol_df, by.x = &#39;gene_id&#39;, by.y = &#39;gene_id&#39;) %&gt;% # Add gene symbol information distinct(gene_symbol, .keep_all = TRUE) %&gt;% # Remove duplicates based on gene symbol select(-gene_id) %&gt;% # Remove the ENSGID column column_to_rownames(var = &quot;gene_symbol&quot;) # use the gene symbols we added as rownames # Write out the processed data frame write.csv(formatted_gene_count_matrix, output_file, row.names = TRUE) # Return the processed count matrix for further use if needed if(return_df){ return(formatted_gene_count_matrix) } } Run the chunk below to format gene-level count matrices for background and FLAMES data using the helper function from above: # convert Gene_id to gene symbol for gene counts convert_ENSGID_to_geneSymbol( gene_count_matrix_path = &quot;./data/FLAMES_out/gene_count.csv&quot;, output_file = &quot;./output_files/counts/geneSymbol_gene_count.csv&quot; ) # convert Gene_id to gene symbol for background counts convert_ENSGID_to_geneSymbol( gene_count_matrix_path = &quot;./data/background/gene_count.csv&quot;, output_file = &quot;./output_files/counts/background_geneSymbol_gene_count.csv&quot; ) Now we have the files we need to begin cleaning our data and removing unwanted noise. "],["removing-sources-of-unwanted-noise-from-the-single-cell-dataset.html", "Chapter 3 Removing sources of unwanted noise from the single cell dataset 3.1 Removing ambient RNA contamination 3.2 Standard gene QC to remove low quality cells", " Chapter 3 Removing sources of unwanted noise from the single cell dataset Now we will do some initial prepossessing of single cell data to ensure we have some high quality data. This will involve 3 main steps Removing empty droplets - droplets that do not contain true cells. Removing ambient RNA contamination - optional Removing low quality cells that 3.0.1 Empty droplets This function removes empty droplets, a critical step to ensure that only true cells are retained for analysis. In short-read analysis using CellRanger, this process is automated, and empty droplets are removed by the software. However, FLAMES does not perform this step automatically, so it must be done manually. The function provided here not only removes empty droplets but also generates general QC metrics, enabling users to assess the reasonableness of the number of cells removed. ### notes: This fucnion should be refactored and cleaed up. Its very long and complex. perform_empty_drops_analysis &lt;- function(output_path, gene_count_file, empty_drops_file, output_seurat_file, fdr_threshold = 0.001, lower = 100) { # Load required libraries # Read in data df &lt;- read.csv(gene_count_file, row.names = 1) df_emptydrops &lt;- read.csv(empty_drops_file, row.names = 1) # Combine the dataframes by row names combined_df &lt;- merge(df, df_emptydrops, by = &quot;row.names&quot;, all = TRUE) rownames(combined_df) &lt;- combined_df[, 1] combined_df[, 1] &lt;- NULL combined_df[is.na(combined_df)] &lt;- 0 # Perform standard pre-processing before empty drops analysis seurat_obj &lt;- CreateSeuratObject(counts = df, project = &quot;Day_55&quot;, min.features = 20) seurat_obj[[&quot;percent.mt&quot;]] &lt;- PercentageFeatureSet(seurat_obj, pattern = &quot;^MT-&quot;) VlnPlot(seurat_obj, features = c(&quot;nFeature_RNA&quot;, &quot;nCount_RNA&quot;, &quot;percent.mt&quot;), ncol = 3) #seurat_obj &lt;- subset(seurat_obj, subset = nFeature_RNA &gt; 10 &amp; nFeature_RNA &lt; 100000 &amp; percent.mt &lt; 100) seurat_obj &lt;- NormalizeData(seurat_obj, normalization.method = &quot;LogNormalize&quot;, scale.factor = 10000) seurat_obj &lt;- FindVariableFeatures(seurat_obj, selection.method = &quot;vst&quot;, nfeatures = 2000) all.genes &lt;- rownames(seurat_obj) seurat_obj &lt;- ScaleData(seurat_obj, features = all.genes) seurat_obj &lt;- RunPCA(seurat_obj, features = VariableFeatures(object = seurat_obj)) ElbowPlot(seurat_obj) seurat_obj &lt;- FindNeighbors(seurat_obj, dims = 1:10) seurat_obj &lt;- FindClusters(seurat_obj, resolution = 0.5) seurat_obj &lt;- RunUMAP(seurat_obj, dims = 1:10) DimPlot(seurat_obj, reduction = &quot;umap&quot;) # Define function to make dgCMatrix from combined counts makedgcmatrix &lt;- function(count.matrix) { seurat_object &lt;- CreateSeuratObject(counts = count.matrix, project = &quot;singlecell&quot;) list(seurat_object[[&quot;RNA&quot;]]$counts) } # Empty Drops Analysis combined_df[] &lt;- lapply(combined_df, function(x) as.numeric(as.character(x))) outs.ddcmatrix &lt;- makedgcmatrix(combined_df)[[1]] br.out &lt;- DropletUtils::barcodeRanks(outs.ddcmatrix) e.out &lt;- emptyDrops(outs.ddcmatrix, lower = lower, niters = 10000, test.ambient = TRUE, BPPARAM = SerialParam()) is.cell &lt;- e.out$FDR &lt; fdr_threshold # Create a dataframe with FDR of TRUE cells is.true.cell_CR &lt;- as.data.frame(e.out@listData[[&quot;FDR&quot;]], e.out@rownames) is.true.cell_CR &lt;- is.true.cell_CR %&gt;% filter(is.true.cell_CR$`e.out@listData[[&quot;FDR&quot;]]` &lt;= fdr_threshold) is.true.cell_CR &lt;- tibble::rownames_to_column(is.true.cell_CR, &quot;cell_id&quot;) # Function for retrieving the Seurat cells and cluster in dataframe overlap_true_cell &lt;- function(seurat_object) { seurat_cluster.df &lt;- as.data.frame(seurat_object$seurat_clusters) seurat_cluster.df &lt;- tibble::rownames_to_column(seurat_cluster.df, &quot;cell_id&quot;) seurat_cluster.df } # Obtain cluster dataframe from Seurat object overlap_CR &lt;- overlap_true_cell(seurat_obj) # Check overlaps between Seurat object and true cells summary(overlap_CR$cell_id %in% is.true.cell_CR$cell_id) # Function to add metadata to Seurat object True.cells &lt;- function(e.out) { cells &lt;- as.data.frame(e.out@rownames) fdr &lt;- as.data.frame(e.out$FDR) T.F.cells &lt;- cbind(cells, fdr) T.F.cells &lt;- data.frame(T.F.cells[,-1], row.names = T.F.cells[,1]) setnames(T.F.cells, c(&#39;FDR&#39;)) T.F.cells %&gt;% mutate(FDR = case_when(FDR &lt; fdr_threshold ~ &quot;Cells&quot;, FDR &gt; fdr_threshold ~ &quot;Empty_drops&quot;)) } cells_CR &lt;- True.cells(e.out) seurat_obj &lt;- AddMetaData(seurat_obj, metadata = cells_CR, col.name = &#39;is.cell&#39;) # Plot Empty drops on Gene UMAP # Create a ggplot object rankplot &lt;- ggplot(br.out, aes(x = rank, y = total)) + geom_point() + scale_x_log10() + scale_y_log10() + labs(x = &quot;Rank&quot;, y = &quot;Total&quot;) + geom_line(aes(y = fitted), color = &quot;red&quot;, linetype = &quot;solid&quot;) + geom_hline(yintercept = metadata(br.out)$knee, color = &quot;dodgerblue&quot;, linetype = &quot;dashed&quot;) + geom_hline(yintercept = metadata(br.out)$inflection, color = &quot;forestgreen&quot;, linetype = &quot;dashed&quot;) + theme( legend.position = &quot;bottomleft&quot; ) + guides(colour = guide_legend(override.aes = list(linetype = c(&quot;dashed&quot;, &quot;dashed&quot;)))) + annotate(&quot;text&quot;, x = Inf, y = metadata(br.out)$knee, label = &quot;knee&quot;, color = &quot;dodgerblue&quot;, vjust = -1, hjust = 1) + annotate(&quot;text&quot;, x = Inf, y = metadata(br.out)$inflection, label = &quot;inflection&quot;, color = &quot;forestgreen&quot;, vjust = -1, hjust = 1) # Summary table -&gt; may want to add a bunch of other summary metrics # Extract counts with checks for NULL cell_counts &lt;- as.data.frame(table(seurat_obj@meta.data$is.cell)) count_true_cells &lt;- ifelse(length(cell_counts$Freq[cell_counts$Var1 == &quot;Cells&quot;]) &gt; 0, cell_counts$Freq[cell_counts$Var1 == &quot;Cells&quot;], 0) count_empty_drops &lt;- ifelse(length(cell_counts$Freq[cell_counts$Var1 == &quot;Empty_drops&quot;]) &gt; 0, cell_counts$Freq[cell_counts$Var1 == &quot;Empty_drops&quot;], 0) # Create the summary table summary_table &lt;- data.frame( Description = c(&#39;fdr&#39;, &#39;lower Counts&#39;, &#39;number of true cells&#39;, &#39;number of empty drops&#39;), Value = c(fdr_threshold, lower, count_true_cells, count_empty_drops) ) summary_grob &lt;- tableGrob(summary_table, rows = NULL, cols = NULL) # Create the combined plot plot1 &lt;- grid.arrange( rankplot, DimPlot(seurat_obj, reduction = &quot;umap&quot;, group.by = &#39;is.cell&#39;) + labs(color = &quot;is.cell&quot;, title = &#39;Seurat Object&#39;) + theme(text = element_text(size = 10), plot.background = element_rect(fill = &quot;white&quot;)), FeaturePlot(seurat_obj, features = &quot;nCount_RNA&quot;) + theme(plot.background = element_rect(fill = &quot;white&quot;)), FeaturePlot(seurat_obj, features = &quot;nFeature_RNA&quot;) + theme(plot.background = element_rect(fill = &quot;white&quot;)), summary_grob, ncol = 2, top = textGrob(&#39;Empty drops vs real cells&#39;) ) #output the plot and summary stats pdf(file = file.path(output_path, paste0(output_seurat_file, &quot;_plots.pdf&quot;)), width = 6, height = 6, bg = &quot;white&quot;) plot(plot1) dev.off() # Subset the Seurat object to remove cells marked as empty drops seurat_obj_rm_empty &lt;- subset(seurat_obj, subset = is.cell == &#39;Cells&#39;) #save the seurat objects saveRDS(seurat_obj, file = file.path(output_path, paste0(&quot;with_empty_&quot;, output_seurat_file, &quot;.rds&quot;))) saveRDS(seurat_obj_rm_empty, file = file.path(output_path, paste0(&quot;removed_empty_&quot;, output_seurat_file, &quot;.rds&quot;))) } ##################### # usage perform_empty_drops_analysis( gene_count_file = &quot;./output_files/counts/geneSymbol_gene_count.csv&quot;, empty_drops_file = &quot;./output_files/counts/background_geneSymbol_gene_count.csv&quot;, output_path = &quot;./output_files/empty_drops/&quot;, output_seurat_file = &quot;Day55&quot;, fdr_threshold = 0.001, # see droplet utils if you want to adjust these params lower = 500 # see droplet utils if you want to adjust these params ) ## Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck ## ## Number of nodes: 344 ## Number of edges: 7209 ## ## Running Louvain algorithm... ## Maximum modularity in 10 random starts: 0.8510 ## Number of communities: 7 ## Elapsed time: 0 seconds 3.1 Removing ambient RNA contamination Now we will remove ambient RNA contamination using decontX (or SoupX). This step is optional, and it’s up to the user to decide whether it’s necessary. In this case, the barcode rank plot (Figure ??) shows a clear distinction between true barcodes and background barcodes, suggesting that ambient RNA contamination may not significantly contribute to noise in this dataset. However, we’ll demonstrate how to run this step in case your barcode rank plot is noisier and contamination is a concern. if users wish to skip this step take the ‘seurat_obj_rm_empty’ object and proceed to standard gene QC step. Barcode rank plot produced by FLAMES. # Function to run decontX on a single Seurat object run_decontX &lt;- function(seurat_obj_path, background_counts_path, sample_id) { # Load the Seurat object seurat_obj &lt;- readRDS(seurat_obj_path) filtered_counts &lt;- as.matrix(GetAssayData(seurat_obj, layer = &quot;counts&quot;)) # Read background counts raw_counts &lt;- as.matrix(read.csv(background_counts_path, row.names = 1)) # Get cluster info from Seurat object cluster_info &lt;- setNames(seurat_obj$seurat_clusters, colnames(seurat_obj)) # Find common genes common_genes &lt;- intersect(rownames(filtered_counts), rownames(raw_counts)) raw_counts &lt;- raw_counts[common_genes, ] filtered_counts &lt;- filtered_counts[common_genes, ] # Create SingleCellExperiment objects sce_raw &lt;- SingleCellExperiment(list(counts = raw_counts)) sce_object &lt;- SingleCellExperiment(list(counts = filtered_counts)) # Run decontX with background sce &lt;- decontX(sce_object, z = cluster_info, background = sce_raw) # Summarize contamination levels contamination_summary &lt;- as.array(summary(sce$decontX_contamination)) print(contamination_summary) # Add contamination levels to Seurat object metadata contamination &lt;- colData(sce)$decontX_contamination seurat_obj &lt;- AddMetaData(seurat_obj, metadata = contamination, col.name = &quot;decontX_contamination&quot;) # Extract decontaminated counts from SCE object decontaminated_counts &lt;- assay(sce, &quot;decontXcounts&quot;) decontaminated_counts &lt;- as.matrix(decontaminated_counts) # Create a new assay with decontaminated counts and add it to Seurat object new_assay &lt;- CreateAssayObject(counts = decontaminated_counts) seurat_obj[[&quot;decontaminated&quot;]] &lt;- new_assay clusters_umap_orig &lt;- DimPlot( object = seurat_obj, group.by = &quot;seurat_clusters&quot;, reduction = &quot;umap&quot;, label = TRUE, pt.size = 0.5 ) + labs(title = &quot;UMAP with Clusters&quot;) # Plot UMAP with contamination levels contamination_umap &lt;- FeaturePlot( object = seurat_obj, features = &quot;decontX_contamination&quot;, reduction = &quot;umap&quot; ) + labs(title = &quot;decontX contamination value&quot;) DefaultAssay(seurat_obj) &lt;- &quot;decontaminated&quot; # Normalization, variable feature selection, and scaling seurat_obj &lt;- NormalizeData(seurat_obj) seurat_obj &lt;- FindVariableFeatures(seurat_obj) seurat_obj &lt;- ScaleData(seurat_obj) # PCA and clustering seurat_obj &lt;- RunPCA(seurat_obj) seurat_obj &lt;- FindNeighbors(seurat_obj, dims = 1:20) seurat_obj &lt;- FindClusters(seurat_obj, resolution = 0.7) # UMAP seurat_obj &lt;- RunUMAP(seurat_obj, dims = 1:20) # Plot UMAP with updated clusters clusters_umap &lt;- DimPlot( object = seurat_obj, group.by = &quot;seurat_clusters&quot;, reduction = &quot;umap&quot;, label = TRUE, pt.size = 0.5 ) + labs(title = &quot;UMAP with Corrected Clusters&quot;) # Combine plots combined_umap &lt;- cowplot::plot_grid(clusters_umap_orig, contamination_umap, clusters_umap, ncol = 2) cat(&quot;Making plots\\n&quot;) # Save the combined plot as a PDF #pdf(file = paste0(sample_id, &quot;_decontx_plots.pdf&quot;), width = 18, height = 6) print(combined_umap) #dev.off() cat(&quot;Saving seurat obj\\n&quot;) # Save the Seurat object saveRDS(seurat_obj, file = paste0(sample_id, &quot;_decontx_seurat_obj.rds&quot;)) # Save decontaminated counts and contamination summary cat(&quot;Saving decontx counts\\n&quot;) write.csv(decontaminated_counts, paste0(sample_id, &quot;_decontx_counts.csv&quot;)) # Print a message indicating that the contamination summary is being saved cat(&quot;Saving contamination summary\\n&quot;) # Ensure contamination_summary is a data frame contamination_summary_df &lt;- as.data.frame(contamination_summary) write.table(contamination_summary_df, file = paste0(sample_id, &quot;_contamination_summary.txt&quot;)) # Optionally return the results return(list(seurat_obj = seurat_obj, decontaminated_counts = decontaminated_counts, contamination_summary = contamination_summary)) } # Run decontX on the input Seurat object and background counts file deconx_results &lt;- run_decontX(&quot;./output_files/empty_drops/removed_empty_Day55.rds&quot;, &quot;./output_files/counts/background_geneSymbol_gene_count.csv&quot;, &quot;./output_files/decontx//Day55&quot;) ## -------------------------------------------------- ## Starting DecontX ## -------------------------------------------------- ## Thu Jan 9 16:57:25 2025 .. Analyzing all cells ## Thu Jan 9 16:57:25 2025 .... Converting to sparse matrix ## Thu Jan 9 16:57:25 2025 .... Generating UMAP ## Thu Jan 9 16:57:31 2025 .... Estimating contamination ## Thu Jan 9 16:57:31 2025 ...... Completed iteration: 10 | converge: 0.02483 ## Thu Jan 9 16:57:31 2025 ...... Completed iteration: 20 | converge: 0.009197 ## Thu Jan 9 16:57:32 2025 ...... Completed iteration: 30 | converge: 0.005009 ## Thu Jan 9 16:57:32 2025 ...... Completed iteration: 40 | converge: 0.003423 ## Thu Jan 9 16:57:32 2025 ...... Completed iteration: 50 | converge: 0.00254 ## Thu Jan 9 16:57:32 2025 ...... Completed iteration: 60 | converge: 0.002116 ## Thu Jan 9 16:57:33 2025 ...... Completed iteration: 70 | converge: 0.001571 ## Thu Jan 9 16:57:33 2025 ...... Completed iteration: 80 | converge: 0.00118 ## Thu Jan 9 16:57:33 2025 ...... Completed iteration: 87 | converge: 0.0009944 ## Thu Jan 9 16:57:33 2025 .. Calculating final decontaminated matrix ## -------------------------------------------------- ## Completed DecontX. Total time: 8.46105 secs ## -------------------------------------------------- ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.001336 0.040294 0.065590 0.095857 0.113042 0.810218 ## Centering and scaling data matrix ## PC_ 1 ## Positive: VIM, ADGRV1, GLI3, DOK5, CACHD1, DACH1, SMC4, SHROOM3, RCN1, PARD3 ## FBXL7, PHGDH, HMGA2, HMGN2, ID3, ENSG00000286757, ID4, LRIG1, SOX2, NBPF14 ## LTBP1, YAP1, HMGB2, ZFP36L1, SLC35F1, TRIM59-IFT80, SMC2, TUBA1B, COL4A5, LEF1 ## Negative: NRXN1, PTPRD, MYT1L, LRRC7, ANK3, MAPT, DCC, UNC79, PTPRN2, SLC4A10 ## KCNH7, ENOX1, ANKS1B, EPHA5, RALYL, PHACTR3, CNTNAP2, RUNX1T1, NBEA, CACNA1E ## THSD7A, CACNA1A, GRIA2, NSG2, LINC01122, NELL2, RBFOX1, CELF4, NFASC, NEUROD6 ## PC_ 2 ## Positive: HECW1, LHX2, MPPED2, IVNS1ABP, LEF1, SEZ6L, SFRP1, ENSG00000251680, CADPS, ROBO2 ## ADAMTS19, B3GAT2, LRRC3B, FUT9, LMNB1, SNCAIP, TMTC1, NKAIN3, LTBP1, FOXP1 ## NRG1, STOX1, SV2C, PANTR1, PREX2, SEMA3C, ITGA2, GLI3, UHRF1, ENSG00000301688 ## Negative: SLIT3, RSPO2, RBM47, DYNLRB2-AS1, PRTG, LMX1A, PCP4, WLS, ENSG00000287949, MAF ## GJA1, FYB2, RSPO1, PLS3, MIR4435-2HG, NR3C2, RBM20, ZIC1, KRT8, LGI1 ## EYA4, KRT18, ENSG00000241231, TPBG, TTR, OTX2, WNT2B, PTCHD1-AS, DLK1, IFITM1 ## PC_ 3 ## Positive: NHLH1, EBF2, SLC22A23, DISP3, ENSG00000285755, CECR2, LINC01830, FRMD4B, ARL4D, BHLHE22 ## ENC1, RASGEF1B, ENSG00000310169, BHLHE22-AS1, PPP1R17, CRABP1, CHD7, FAM149A, RBFOX3, NFIA-AS2 ## HYCC1, LMO1, NPTX1, HUNK, UNC5A, SERINC5, PGAP1, P2RX3, PRDM8, ENSG00000231252 ## Negative: OPCML, NAV3, FRMD4A, GRIN2B, XKR4, KIRREL3, NALF1, KCNMA1, CNTN1, NAV2 ## GRIK3, CALN1, LRP1B, SMARCA2, DGKI, NRG3, SYN3, PRKG1, MACROD2, GAREM1 ## SLCO3A1, MDGA2, SYT13, ATXN1, ULK4, GRID2, GABBR2, ZC3H12B, LMO3, RIMS1 ## PC_ 4 ## Positive: ZFPM2, ZFPM2-AS1, ZEB2, MYO5B, CSRP2, ZBTB18, PLXDC2, ST18, NEUROD6, CAP2 ## NELL2, ENSG00000307341, PDE1A, GAREM1, ADAMTS3, FLRT2, DLGAP1, EPHA7, NEUROD2, GRIA3 ## CTTNBP2, SLC24A2, PDGFC, DMD, SYNDIG1, CORO2B, CENPE, KCNH7, SDK1, THSD7A ## Negative: COPG2, PBX3, GAD2, COPG2IT1, VGF, ENSG00000259460, KCNMB2, MEIS2, KCNMB2-AS1, LINC01414 ## SIX3, ENSG00000270953, MEST, ENSG00000298285, SPRY4-AS1, PCDH7, DLX1, DLX6-AS1, SORCS3, SIX3-AS1 ## GRM7, KCNH1, CDH8, DLX2, SGCD, MDGA2, SLC35F3, NRXN3, GAD1, MIR325HG ## PC_ 5 ## Positive: CDC20, CCNB1, PLK1, UBE2S, DLGAP5, KNSTRN, CCNB2, ARL6IP1, TPX2, AURKA ## NEK2, PTTG1, CDKN3, TROAP, GTSE1, UBE2C, BUB1, SGO2, KIF20A, CEP55 ## PRR11, CENPE, GAS2L3, CDCA8, ASPM, PIMREG, ARHGAP11A, BIRC5, NDE1, DEPDC1 ## Negative: HECW1, DPP10, GPC6, LINC03051, BMPR1B, SLC1A3, SPIDR, DMD, ZFPM2, TMTC1 ## SDK1, ADAMTS6, ADAMTS19, ENSG00000301688, HDAC9, MEGF11, PVT1, MCM4, LRP4, RHBDL3 ## FREM2, TAFA1, STOX1, LAMA1, RORA, NCKAP5, HELLS, PDGFC, STOX2, KHDRBS2 ## Computing nearest neighbor graph ## Computing SNN ## Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck ## ## Number of nodes: 339 ## Number of edges: 7342 ## ## Running Louvain algorithm... ## Maximum modularity in 10 random starts: 0.8177 ## Number of communities: 8 ## Elapsed time: 0 seconds ## 16:57:34 UMAP embedding parameters a = 0.9922 b = 1.112 ## 16:57:34 Read 339 rows and found 20 numeric columns ## 16:57:34 Using Annoy for neighbor search, n_neighbors = 30 ## 16:57:34 Building Annoy index with metric = cosine, n_trees = 50 ## 0% 10 20 30 40 50 60 70 80 90 100% ## [----|----|----|----|----|----|----|----|----|----| ## **************************************************| ## 16:57:35 Writing NN index file to temp file /tmp/RtmpaSrlUm/file5e84c2f90d2 ## 16:57:35 Searching Annoy index using 1 thread, search_k = 3000 ## 16:57:35 Annoy recall = 100% ## 16:57:35 Commencing smooth kNN distance calibration using 1 thread with target n_neighbors = 30 ## 16:57:37 Initializing from normalized Laplacian + noise (using RSpectra) ## 16:57:37 Commencing optimization for 500 epochs, with 11376 positive edges ## 16:57:38 Optimization finished ## Making plots ## Saving seurat obj ## Saving decontx counts ## Saving contamination summary 3.2 Standard gene QC to remove low quality cells Now that we have removed empty drops and ambient RNA we will perform standard QC as described in the Seurat tutorial (found here). First we will determine what our filtering criteria should be using some basic QC plots. # standard QC filtering and also remove doublets #define sample name sample_id = &#39;Day55_tutorial&#39; # Create Seurat object seurat_object &lt;- CreateSeuratObject(counts = deconx_results$decontaminated_counts, project = sample_id) ## Warning: Data is of class matrix. Coercing to dgCMatrix. # Plot relationship between reads and unique genes per cell plot_scatter1 &lt;- FeatureScatter(seurat_object, feature1 = &quot;nCount_RNA&quot;, feature2 = &quot;nFeature_RNA&quot;) + geom_smooth(method = &quot;lm&quot;) + NoLegend() + labs(title = &quot;Reads vs Unique Genes per Cell BEFORE Filtering&quot;) plot(plot_scatter1) ## `geom_smooth()` using formula = &#39;y ~ x&#39; # Add mitochondrial percentage seurat_object[[&quot;joined&quot;]] &lt;- JoinLayers(seurat_object[[&quot;RNA&quot;]]) ## Warning: Key &#39;rna_&#39; taken, using &#39;joined_&#39; instead seurat_object[[&quot;percent.mt&quot;]] &lt;- PercentageFeatureSet(seurat_object, pattern = &quot;^MT-&quot;) p1 &lt;- VlnPlot(seurat_object, features = c(&quot;nFeature_RNA&quot;, &quot;nCount_RNA&quot;, &quot;percent.mt&quot;)) ## Warning: Default search for &quot;data&quot; layer in &quot;RNA&quot; assay yielded no results; utilizing &quot;counts&quot; layer instead. p1 + plot_annotation(title = &quot;QC plots (gene level) BEFORE Filtering&quot;) Based on these QC plots we will filter the data with the following values listed in the bellow code chunk. QC paramaters might vary based on your own data so please make sure you filter your data accordingly. Here we will also remove doublets - droplets that contain two or more cells - using the package ‘doubletfinder’. # Filter cells based on feature and count thresholds ## define the filtering params - (change these based on your data) max.features = 10000 min.features = 1000 min.counts = 800 max.counts = 100000 MT = 10 npc = 15 doublet_rate = 0.039 cluster_res = 0.9 #now we filter the seurat object based on the QC params listed above filt_seurat_object &lt;- subset(seurat_object, subset = nFeature_RNA &gt; min.features &amp; nFeature_RNA &lt; max.features &amp; percent.mt &lt; MT &amp; nCount_RNA &lt; max.counts &amp; nCount_RNA &gt; min.counts) # Plot quality metrics after filtering p2 &lt;- VlnPlot(filt_seurat_object, features = c(&quot;nFeature_RNA&quot;, &quot;nCount_RNA&quot;, &quot;percent.mt&quot;)) ## Warning: Default search for &quot;data&quot; layer in &quot;RNA&quot; assay yielded no results; utilizing &quot;counts&quot; layer instead. p2 + plot_annotation(title = &quot;QC metrics gene level AFTER Filtering&quot;) # Normalize data filt_seurat_object &lt;- NormalizeData(filt_seurat_object, normalization.method = &quot;LogNormalize&quot;, scale.factor = 10000) # Identify highly variable features filt_seurat_object &lt;- FindVariableFeatures(filt_seurat_object, selection.method = &quot;vst&quot;, nfeatures = 2000) # Apply linear transformation all_genes &lt;- rownames(filt_seurat_object) filt_seurat_object &lt;- ScaleData(filt_seurat_object, features = all_genes) # Perform PCA filt_seurat_object &lt;- RunPCA(filt_seurat_object, features = VariableFeatures(object = filt_seurat_object)) # Cluster cells filt_seurat_object &lt;- FindNeighbors(filt_seurat_object, dims = 1:npc) filt_seurat_object &lt;- FindClusters(filt_seurat_object, resolution = cluster_res) ## Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck ## ## Number of nodes: 319 ## Number of edges: 6816 ## ## Running Louvain algorithm... ## Maximum modularity in 10 random starts: 0.7804 ## Number of communities: 8 ## Elapsed time: 0 seconds # Perform UMAP filt_seurat_object &lt;- RunUMAP(filt_seurat_object, dims = 1:npc) ### Filter out doublets (remember to modify doublet rate if samples have variable target cells) ## pK Identification (no ground-truth) sweep.res.list_pbmc &lt;- paramSweep(filt_seurat_object, PCs = 1:npc, sct = FALSE) ## [1] &quot;Creating artificial doublets for pN = 5%&quot; ## [1] &quot;Creating Seurat object...&quot; ## [1] &quot;Normalizing Seurat object...&quot; ## [1] &quot;Finding variable genes...&quot; ## [1] &quot;Scaling data...&quot; ## [1] &quot;Running PCA...&quot; ## [1] &quot;Calculating PC distance matrix...&quot; ## [1] &quot;Defining neighborhoods...&quot; ## [1] &quot;Computing pANN across all pK...&quot; ## [1] &quot;pK = 0.03...&quot; ## [1] &quot;pK = 0.04...&quot; ## [1] &quot;pK = 0.05...&quot; ## [1] &quot;pK = 0.06...&quot; ## [1] &quot;pK = 0.07...&quot; ## [1] &quot;pK = 0.08...&quot; ## [1] &quot;pK = 0.09...&quot; ## [1] &quot;pK = 0.1...&quot; ## [1] &quot;pK = 0.11...&quot; ## [1] &quot;pK = 0.12...&quot; ## [1] &quot;pK = 0.13...&quot; ## [1] &quot;pK = 0.14...&quot; ## [1] &quot;pK = 0.15...&quot; ## [1] &quot;pK = 0.16...&quot; ## [1] &quot;pK = 0.17...&quot; ## [1] &quot;pK = 0.18...&quot; ## [1] &quot;pK = 0.19...&quot; ## [1] &quot;pK = 0.2...&quot; ## [1] &quot;pK = 0.21...&quot; ## [1] &quot;pK = 0.22...&quot; ## [1] &quot;pK = 0.23...&quot; ## [1] &quot;pK = 0.24...&quot; ## [1] &quot;pK = 0.25...&quot; ## [1] &quot;pK = 0.26...&quot; ## [1] &quot;pK = 0.27...&quot; ## [1] &quot;pK = 0.28...&quot; ## [1] &quot;pK = 0.29...&quot; ## [1] &quot;pK = 0.3...&quot; ## [1] &quot;Creating artificial doublets for pN = 10%&quot; ## [1] &quot;Creating Seurat object...&quot; ## [1] &quot;Normalizing Seurat object...&quot; ## [1] &quot;Finding variable genes...&quot; ## [1] &quot;Scaling data...&quot; ## [1] &quot;Running PCA...&quot; ## [1] &quot;Calculating PC distance matrix...&quot; ## [1] &quot;Defining neighborhoods...&quot; ## [1] &quot;Computing pANN across all pK...&quot; ## [1] &quot;pK = 0.03...&quot; ## [1] &quot;pK = 0.04...&quot; ## [1] &quot;pK = 0.05...&quot; ## [1] &quot;pK = 0.06...&quot; ## [1] &quot;pK = 0.07...&quot; ## [1] &quot;pK = 0.08...&quot; ## [1] &quot;pK = 0.09...&quot; ## [1] &quot;pK = 0.1...&quot; ## [1] &quot;pK = 0.11...&quot; ## [1] &quot;pK = 0.12...&quot; ## [1] &quot;pK = 0.13...&quot; ## [1] &quot;pK = 0.14...&quot; ## [1] &quot;pK = 0.15...&quot; ## [1] &quot;pK = 0.16...&quot; ## [1] &quot;pK = 0.17...&quot; ## [1] &quot;pK = 0.18...&quot; ## [1] &quot;pK = 0.19...&quot; ## [1] &quot;pK = 0.2...&quot; ## [1] &quot;pK = 0.21...&quot; ## [1] &quot;pK = 0.22...&quot; ## [1] &quot;pK = 0.23...&quot; ## [1] &quot;pK = 0.24...&quot; ## [1] &quot;pK = 0.25...&quot; ## [1] &quot;pK = 0.26...&quot; ## [1] &quot;pK = 0.27...&quot; ## [1] &quot;pK = 0.28...&quot; ## [1] &quot;pK = 0.29...&quot; ## [1] &quot;pK = 0.3...&quot; ## [1] &quot;Creating artificial doublets for pN = 15%&quot; ## [1] &quot;Creating Seurat object...&quot; ## [1] &quot;Normalizing Seurat object...&quot; ## [1] &quot;Finding variable genes...&quot; ## [1] &quot;Scaling data...&quot; ## [1] &quot;Running PCA...&quot; ## [1] &quot;Calculating PC distance matrix...&quot; ## [1] &quot;Defining neighborhoods...&quot; ## [1] &quot;Computing pANN across all pK...&quot; ## [1] &quot;pK = 0.03...&quot; ## [1] &quot;pK = 0.04...&quot; ## [1] &quot;pK = 0.05...&quot; ## [1] &quot;pK = 0.06...&quot; ## [1] &quot;pK = 0.07...&quot; ## [1] &quot;pK = 0.08...&quot; ## [1] &quot;pK = 0.09...&quot; ## [1] &quot;pK = 0.1...&quot; ## [1] &quot;pK = 0.11...&quot; ## [1] &quot;pK = 0.12...&quot; ## [1] &quot;pK = 0.13...&quot; ## [1] &quot;pK = 0.14...&quot; ## [1] &quot;pK = 0.15...&quot; ## [1] &quot;pK = 0.16...&quot; ## [1] &quot;pK = 0.17...&quot; ## [1] &quot;pK = 0.18...&quot; ## [1] &quot;pK = 0.19...&quot; ## [1] &quot;pK = 0.2...&quot; ## [1] &quot;pK = 0.21...&quot; ## [1] &quot;pK = 0.22...&quot; ## [1] &quot;pK = 0.23...&quot; ## [1] &quot;pK = 0.24...&quot; ## [1] &quot;pK = 0.25...&quot; ## [1] &quot;pK = 0.26...&quot; ## [1] &quot;pK = 0.27...&quot; ## [1] &quot;pK = 0.28...&quot; ## [1] &quot;pK = 0.29...&quot; ## [1] &quot;pK = 0.3...&quot; ## [1] &quot;Creating artificial doublets for pN = 20%&quot; ## [1] &quot;Creating Seurat object...&quot; ## [1] &quot;Normalizing Seurat object...&quot; ## [1] &quot;Finding variable genes...&quot; ## [1] &quot;Scaling data...&quot; ## [1] &quot;Running PCA...&quot; ## [1] &quot;Calculating PC distance matrix...&quot; ## [1] &quot;Defining neighborhoods...&quot; ## [1] &quot;Computing pANN across all pK...&quot; ## [1] &quot;pK = 0.03...&quot; ## [1] &quot;pK = 0.04...&quot; ## [1] &quot;pK = 0.05...&quot; ## [1] &quot;pK = 0.06...&quot; ## [1] &quot;pK = 0.07...&quot; ## [1] &quot;pK = 0.08...&quot; ## [1] &quot;pK = 0.09...&quot; ## [1] &quot;pK = 0.1...&quot; ## [1] &quot;pK = 0.11...&quot; ## [1] &quot;pK = 0.12...&quot; ## [1] &quot;pK = 0.13...&quot; ## [1] &quot;pK = 0.14...&quot; ## [1] &quot;pK = 0.15...&quot; ## [1] &quot;pK = 0.16...&quot; ## [1] &quot;pK = 0.17...&quot; ## [1] &quot;pK = 0.18...&quot; ## [1] &quot;pK = 0.19...&quot; ## [1] &quot;pK = 0.2...&quot; ## [1] &quot;pK = 0.21...&quot; ## [1] &quot;pK = 0.22...&quot; ## [1] &quot;pK = 0.23...&quot; ## [1] &quot;pK = 0.24...&quot; ## [1] &quot;pK = 0.25...&quot; ## [1] &quot;pK = 0.26...&quot; ## [1] &quot;pK = 0.27...&quot; ## [1] &quot;pK = 0.28...&quot; ## [1] &quot;pK = 0.29...&quot; ## [1] &quot;pK = 0.3...&quot; ## [1] &quot;Creating artificial doublets for pN = 25%&quot; ## [1] &quot;Creating Seurat object...&quot; ## [1] &quot;Normalizing Seurat object...&quot; ## [1] &quot;Finding variable genes...&quot; ## [1] &quot;Scaling data...&quot; ## [1] &quot;Running PCA...&quot; ## [1] &quot;Calculating PC distance matrix...&quot; ## [1] &quot;Defining neighborhoods...&quot; ## [1] &quot;Computing pANN across all pK...&quot; ## [1] &quot;pK = 0.03...&quot; ## [1] &quot;pK = 0.04...&quot; ## [1] &quot;pK = 0.05...&quot; ## [1] &quot;pK = 0.06...&quot; ## [1] &quot;pK = 0.07...&quot; ## [1] &quot;pK = 0.08...&quot; ## [1] &quot;pK = 0.09...&quot; ## [1] &quot;pK = 0.1...&quot; ## [1] &quot;pK = 0.11...&quot; ## [1] &quot;pK = 0.12...&quot; ## [1] &quot;pK = 0.13...&quot; ## [1] &quot;pK = 0.14...&quot; ## [1] &quot;pK = 0.15...&quot; ## [1] &quot;pK = 0.16...&quot; ## [1] &quot;pK = 0.17...&quot; ## [1] &quot;pK = 0.18...&quot; ## [1] &quot;pK = 0.19...&quot; ## [1] &quot;pK = 0.2...&quot; ## [1] &quot;pK = 0.21...&quot; ## [1] &quot;pK = 0.22...&quot; ## [1] &quot;pK = 0.23...&quot; ## [1] &quot;pK = 0.24...&quot; ## [1] &quot;pK = 0.25...&quot; ## [1] &quot;pK = 0.26...&quot; ## [1] &quot;pK = 0.27...&quot; ## [1] &quot;pK = 0.28...&quot; ## [1] &quot;pK = 0.29...&quot; ## [1] &quot;pK = 0.3...&quot; ## [1] &quot;Creating artificial doublets for pN = 30%&quot; ## [1] &quot;Creating Seurat object...&quot; ## [1] &quot;Normalizing Seurat object...&quot; ## [1] &quot;Finding variable genes...&quot; ## [1] &quot;Scaling data...&quot; ## [1] &quot;Running PCA...&quot; ## [1] &quot;Calculating PC distance matrix...&quot; ## [1] &quot;Defining neighborhoods...&quot; ## [1] &quot;Computing pANN across all pK...&quot; ## [1] &quot;pK = 0.03...&quot; ## [1] &quot;pK = 0.04...&quot; ## [1] &quot;pK = 0.05...&quot; ## [1] &quot;pK = 0.06...&quot; ## [1] &quot;pK = 0.07...&quot; ## [1] &quot;pK = 0.08...&quot; ## [1] &quot;pK = 0.09...&quot; ## [1] &quot;pK = 0.1...&quot; ## [1] &quot;pK = 0.11...&quot; ## [1] &quot;pK = 0.12...&quot; ## [1] &quot;pK = 0.13...&quot; ## [1] &quot;pK = 0.14...&quot; ## [1] &quot;pK = 0.15...&quot; ## [1] &quot;pK = 0.16...&quot; ## [1] &quot;pK = 0.17...&quot; ## [1] &quot;pK = 0.18...&quot; ## [1] &quot;pK = 0.19...&quot; ## [1] &quot;pK = 0.2...&quot; ## [1] &quot;pK = 0.21...&quot; ## [1] &quot;pK = 0.22...&quot; ## [1] &quot;pK = 0.23...&quot; ## [1] &quot;pK = 0.24...&quot; ## [1] &quot;pK = 0.25...&quot; ## [1] &quot;pK = 0.26...&quot; ## [1] &quot;pK = 0.27...&quot; ## [1] &quot;pK = 0.28...&quot; ## [1] &quot;pK = 0.29...&quot; ## [1] &quot;pK = 0.3...&quot; sweep.stats_pbmc &lt;- summarizeSweep(sweep.res.list_pbmc, GT = FALSE) bcmvn_pbmc &lt;- find.pK(sweep.stats_pbmc) ## NULL ##### pK &lt;- bcmvn_pbmc %&gt;% filter(BCmetric == max(BCmetric)) %&gt;% dplyr::select(pK) pK &lt;- as.numeric(as.character(pK[[1]])) ## Homotypic Doublet Proportion Estimate annotations &lt;- filt_seurat_object@meta.data$seurat_clusters homotypic.prop &lt;- modelHomotypic(annotations) nExp_poi &lt;- round(doublet_rate * nrow(filt_seurat_object@meta.data)) nExp_poi.adj &lt;- round(nExp_poi * (1 - homotypic.prop)) # Run doubletFinder filt_seurat_object &lt;- doubletFinder(filt_seurat_object, PCs = 1:npc, pN = 0.25, pK = pK, nExp = nExp_poi.adj, reuse.pANN = FALSE, sct = FALSE) ## [1] &quot;Creating 106 artificial doublets...&quot; ## [1] &quot;Creating Seurat object...&quot; ## [1] &quot;Normalizing Seurat object...&quot; ## [1] &quot;Finding variable genes...&quot; ## [1] &quot;Scaling data...&quot; ## [1] &quot;Running PCA...&quot; ## [1] &quot;Calculating PC distance matrix...&quot; ## [1] &quot;Computing pANN...&quot; ## [1] &quot;Classifying doublets..&quot; colnames(filt_seurat_object@meta.data) &lt;- sub(&quot;DF.classifications_.*$&quot;, &quot;DF.classifications&quot;, colnames(filt_seurat_object@meta.data)) # Summary doublets statsDoublets &lt;- filt_seurat_object@meta.data %&gt;% group_by(DF.classifications) %&gt;% summarize(Median_nCount_RNA = median(nCount_RNA), Median_nFeature_RNA = median(nFeature_RNA), Count = n()) ###Save the seurat object with doublets listed filt_seurat_object_doublets &lt;- filt_seurat_object filt_seurat_object &lt;- subset(filt_seurat_object, subset = DF.classifications == &#39;Singlet&#39;) # figures ggplot_list &lt;- list( ElbowPlot(filt_seurat_object) + labs(title = &#39;SD explained by each PC&#39;) + theme(text = element_text(size = 10)), FeatureScatter(filt_seurat_object, feature1 = &quot;nCount_RNA&quot;, feature2 = &quot;nFeature_RNA&quot;) + geom_smooth(method = &quot;lm&quot;) + NoLegend() + labs(title = &quot;Association between reads and \\nunique genes per cell AFTER filtering&quot;), DimPlot(filt_seurat_object, reduction = &quot;umap&quot;) + labs(color = &quot;Cluster \\n(from PCA)&quot;, title = &#39;&#39;) + theme(text = element_text(size = 10)), FeaturePlot(filt_seurat_object, reduction = &quot;umap&quot;, features = &#39;nCount_RNA&#39;) + labs(color = &quot;UMI count&quot;, title = &#39;&#39;) + theme(text = element_text(size = 10)), FeaturePlot(filt_seurat_object, reduction = &quot;umap&quot;, features = &#39;nFeature_RNA&#39;) + labs(color = str_wrap(&quot;Feature count (gene)&quot;, 15), title = &#39;&#39;) + theme(text = element_text(size = 10)), p2 ) combined_plots &lt;- plot_grid(plotlist = ggplot_list, ncol = 2) plot(combined_plots) plot(DimPlot(filt_seurat_object_doublets, reduction = &#39;umap&#39;, group.by = &quot;DF.classifications&quot;)) tbl_sts1 &lt;- tableGrob(statsDoublets) grid.newpage() grid.draw(tbl_sts1) stats_sumary &lt;- rbind(&quot;Sample ID&quot; = sample_id, &quot;Cells_before_filter&quot; = dim(seurat_object)[2], &quot;Cells_after_filter&quot; = dim(filt_seurat_object)[2], &quot;Median Feature per Cell before filter&quot; = median(seurat_object$nFeature_RNA), &quot;Median Reads per Gene before filter&quot; = median(seurat_object$nCount_RNA), &quot;Median Feature per Cell&quot; = median(filt_seurat_object$nFeature_RNA), &quot;Median Reads per Gene&quot; = median(filt_seurat_object$nCount_RNA), &quot;Max Features&quot; = max.features, &quot;Min Features&quot; = min.features, &quot;Min Counts&quot; = min.counts, &quot;Max Counts&quot; = max.counts, &quot;MT Percentage&quot; = MT, &quot;NPCs&quot; = npc, &quot;Median Percent MT before Filter&quot; = median(seurat_object@meta.data[[&quot;percent.mt&quot;]]), &quot;Median Percent MT after Filter&quot; = median(filt_seurat_object@meta.data[[&quot;percent.mt&quot;]]) ) tbl_sts2 &lt;- tableGrob(stats_sumary) grid.newpage() grid.draw(tbl_sts2) #save files saveRDS(filt_seurat_object, file = paste0(&quot;./output_files/QC/&quot;, sample_id, &quot;_umap_object.rds&quot;)) saveRDS(filt_seurat_object_doublets, file = paste0(&quot;./output_files/QC/&quot;,sample_id, &quot;_with_doublets_umap_object.rds&quot;)) write.table(stats_sumary, file = paste0(&quot;./output_files/QC/&quot;, sample_id, &quot;_stats.csv&quot;)) Now that we have filtered the object to ensure we retain high quality data we are going to add in the isoform level information. "],["add-isoform-counts-to-seurat-object.html", "Chapter 4 Add isoform counts to Seurat object", " Chapter 4 Add isoform counts to Seurat object Now that we have 309 high-quality cells for our downstream analysis, let’s incorporate isoform-level information into our Seurat object. The first step is to read in the outputs from FLAMES, which provides isoform-level counts from Oarfish. We’ll create a new Seurat object for this data, specifically for the isoform counts, and add it as a new assay to our existing object. This setup will allow us to explore both gene-level and isoform-level counts within a single Seurat object, giving us a more comprehensive view of our data. ## Processed sample: oarfish ## Output saved to: ./output_files/counts//gene_symbol_oarfish_counts.csv We have now created a Seurat object with isoform-level count data. Users can take this object and follow similar processing steps as at the gene level 3, which might include filtering out low-quality cells and removing ambient RNA counts. In our case, we evaluated these steps and found they don’t add much value as low quality cells are already removed at the gene level and we can leverage this information rather than processing the isoform counts in the same way. Additionally, tools like DeconX and SoupX haven’t been tested on isoform count data, so we decided to exclude this analysis. Instead, we believe the most valuable approach is to append the isoform data to our gene-level Seurat object, resulting in two assays: one for gene-level and one for isoform-level data. If users have short-read data, they could similarly add it as a third assay. Since we’ve already filtered out low-quality cells based on our gene-level data, we’ll use these high-quality cells to filter our isoform data. ## An object of class Seurat ## 93557 features across 309 samples within 3 assays ## Active assay: RNA (14906 features, 2000 variable features) ## 3 layers present: counts, data, scale.data ## 2 other assays present: joined, iso ## 4 dimensional reductions calculated: pca, umap, pca_iso, umap_iso Great! We now have an object containing both assays, so we can start by plotting some of our favorite genes and isoforms. This setup gives us the flexibility to visualize gene expression on isoform UMAPs and vice versa, allowing us to integrate and explore the expression of both gene and isoform expression within single cells on the same dimensional reduction. Let’s begin by plotting VIM and TBR1. VIM is a marker of progenitor cells, while TBR1 is a marker of deep layer neurons. We observe that the expression of VIM and TBR genes is localized to two distinct clusters, which aligns with our expectations. This suggests that some cells remain in the progenitor/radial glial stage, while others have already begun differentiating into neurons. Furthermore, our data reveals isoform-level expression for each of our genes, including TBR1, which shows distinct isoform expression patterns across different cell populations. To plot genes and expressed isoforms from that gene simply change the ‘gene’ value to your favorite gene and run the code chunk above. Now we have a count matrix with two assays, gene and isoform. There are many avenues for analysis. We will begin with finding DE genes and isoforms. Then we identify cell types and perform trajectory analysis. finally we look into interesting isoforms unique to each cluster "],["finding-differentially-expressed-genes-and-isoforms.html", "Chapter 5 Finding differentially expressed genes and isoforms 5.1 Differentially expressed genes by cluster identity 5.2 Identifying cell types 5.3 plotting trajectories 5.4 Finding isofrms of interest 5.5 5.6 plotting with ditoplot", " Chapter 5 Finding differentially expressed genes and isoforms 5.1 Differentially expressed genes by cluster identity first we will look at marker genes for each cluster. This will help us identify which genes are DE in each cluster and indicate which cell type each cluster belongs to. We will also look at DE isoforms using the same methodology #Find markers for all clusters using the &quot;RNA&quot; and &quot;iso&quot; assay all_markers_gene &lt;- FindAllMarkers(seu_obj, assay = &quot;RNA&quot;, do.print = TRUE, logfc.threshold = 0.5, min.pct = 0.20, only.pos = TRUE) %&gt;% dplyr::filter(p_val_adj &lt; 0.05) all_markers_iso &lt;- FindAllMarkers(seu_obj, assay = &quot;iso&quot;, do.print = TRUE, logfc.threshold = 0.5, min.pct = 0.20, only.pos = TRUE) %&gt;% dplyr::filter(p_val_adj &lt; 0.05) #save the list of DE genes write.csv(all_markers_gene, &quot;./output_files/DE/all_markers_one_gene.csv&quot;) write.csv(all_markers_iso, &quot;./output_files/DE/all_markers_one_iso.csv&quot;) #notes - could add other DE options maybe add this later 5.2 Identifying cell types Based on these differentially expressed (DE) genes, we can identify the cell types present in our sample. This process is often complex and requires prior knowledge of cell markers as well as an understanding of the cell types expected in the sample. An alternative approach is to use automated cell type identification tools. In this tutorial, we will use scType [ref]. However, it is important to note that the accuracy of automated tools varies and depends heavily on the reference database they utilize. Therefore, it is recommended to use a combination of methods to cross-validate cell type identification and ensure robust results. # load libraries from sctype lapply(c(&quot;ggraph&quot;,&quot;igraph&quot;,&quot;tidyverse&quot;, &quot;data.tree&quot;), library, character.only = T) ## [[1]] ## [1] &quot;ggraph&quot; &quot;SeuratWrappers&quot; &quot;monocle3&quot; &quot;ROCR&quot; &quot;KernSmooth&quot; &quot;parallel&quot; ## [7] &quot;fields&quot; &quot;viridisLite&quot; &quot;spam&quot; &quot;lubridate&quot; &quot;forcats&quot; &quot;dplyr&quot; ## [13] &quot;purrr&quot; &quot;readr&quot; &quot;tidyr&quot; &quot;tibble&quot; &quot;ggplot2&quot; &quot;tidyverse&quot; ## [19] &quot;patchwork&quot; &quot;grid&quot; &quot;cowplot&quot; &quot;stringr&quot; &quot;DoubletFinder&quot; &quot;celda&quot; ## [25] &quot;Matrix&quot; &quot;BiocParallel&quot; &quot;data.table&quot; &quot;gridExtra&quot; &quot;DropletUtils&quot; &quot;SingleCellExperiment&quot; ## [31] &quot;SummarizedExperiment&quot; &quot;Biobase&quot; &quot;MatrixGenerics&quot; &quot;matrixStats&quot; &quot;Seurat&quot; &quot;SeuratObject&quot; ## [37] &quot;sp&quot; &quot;rtracklayer&quot; &quot;GenomicRanges&quot; &quot;GenomeInfoDb&quot; &quot;IRanges&quot; &quot;S4Vectors&quot; ## [43] &quot;BiocGenerics&quot; &quot;stats4&quot; &quot;stats&quot; &quot;graphics&quot; &quot;grDevices&quot; &quot;utils&quot; ## [49] &quot;datasets&quot; &quot;methods&quot; &quot;base&quot; ## ## [[2]] ## [1] &quot;igraph&quot; &quot;ggraph&quot; &quot;SeuratWrappers&quot; &quot;monocle3&quot; &quot;ROCR&quot; &quot;KernSmooth&quot; ## [7] &quot;parallel&quot; &quot;fields&quot; &quot;viridisLite&quot; &quot;spam&quot; &quot;lubridate&quot; &quot;forcats&quot; ## [13] &quot;dplyr&quot; &quot;purrr&quot; &quot;readr&quot; &quot;tidyr&quot; &quot;tibble&quot; &quot;ggplot2&quot; ## [19] &quot;tidyverse&quot; &quot;patchwork&quot; &quot;grid&quot; &quot;cowplot&quot; &quot;stringr&quot; &quot;DoubletFinder&quot; ## [25] &quot;celda&quot; &quot;Matrix&quot; &quot;BiocParallel&quot; &quot;data.table&quot; &quot;gridExtra&quot; &quot;DropletUtils&quot; ## [31] &quot;SingleCellExperiment&quot; &quot;SummarizedExperiment&quot; &quot;Biobase&quot; &quot;MatrixGenerics&quot; &quot;matrixStats&quot; &quot;Seurat&quot; ## [37] &quot;SeuratObject&quot; &quot;sp&quot; &quot;rtracklayer&quot; &quot;GenomicRanges&quot; &quot;GenomeInfoDb&quot; &quot;IRanges&quot; ## [43] &quot;S4Vectors&quot; &quot;BiocGenerics&quot; &quot;stats4&quot; &quot;stats&quot; &quot;graphics&quot; &quot;grDevices&quot; ## [49] &quot;utils&quot; &quot;datasets&quot; &quot;methods&quot; &quot;base&quot; ## ## [[3]] ## [1] &quot;igraph&quot; &quot;ggraph&quot; &quot;SeuratWrappers&quot; &quot;monocle3&quot; &quot;ROCR&quot; &quot;KernSmooth&quot; ## [7] &quot;parallel&quot; &quot;fields&quot; &quot;viridisLite&quot; &quot;spam&quot; &quot;lubridate&quot; &quot;forcats&quot; ## [13] &quot;dplyr&quot; &quot;purrr&quot; &quot;readr&quot; &quot;tidyr&quot; &quot;tibble&quot; &quot;ggplot2&quot; ## [19] &quot;tidyverse&quot; &quot;patchwork&quot; &quot;grid&quot; &quot;cowplot&quot; &quot;stringr&quot; &quot;DoubletFinder&quot; ## [25] &quot;celda&quot; &quot;Matrix&quot; &quot;BiocParallel&quot; &quot;data.table&quot; &quot;gridExtra&quot; &quot;DropletUtils&quot; ## [31] &quot;SingleCellExperiment&quot; &quot;SummarizedExperiment&quot; &quot;Biobase&quot; &quot;MatrixGenerics&quot; &quot;matrixStats&quot; &quot;Seurat&quot; ## [37] &quot;SeuratObject&quot; &quot;sp&quot; &quot;rtracklayer&quot; &quot;GenomicRanges&quot; &quot;GenomeInfoDb&quot; &quot;IRanges&quot; ## [43] &quot;S4Vectors&quot; &quot;BiocGenerics&quot; &quot;stats4&quot; &quot;stats&quot; &quot;graphics&quot; &quot;grDevices&quot; ## [49] &quot;utils&quot; &quot;datasets&quot; &quot;methods&quot; &quot;base&quot; ## ## [[4]] ## [1] &quot;data.tree&quot; &quot;igraph&quot; &quot;ggraph&quot; &quot;SeuratWrappers&quot; &quot;monocle3&quot; &quot;ROCR&quot; ## [7] &quot;KernSmooth&quot; &quot;parallel&quot; &quot;fields&quot; &quot;viridisLite&quot; &quot;spam&quot; &quot;lubridate&quot; ## [13] &quot;forcats&quot; &quot;dplyr&quot; &quot;purrr&quot; &quot;readr&quot; &quot;tidyr&quot; &quot;tibble&quot; ## [19] &quot;ggplot2&quot; &quot;tidyverse&quot; &quot;patchwork&quot; &quot;grid&quot; &quot;cowplot&quot; &quot;stringr&quot; ## [25] &quot;DoubletFinder&quot; &quot;celda&quot; &quot;Matrix&quot; &quot;BiocParallel&quot; &quot;data.table&quot; &quot;gridExtra&quot; ## [31] &quot;DropletUtils&quot; &quot;SingleCellExperiment&quot; &quot;SummarizedExperiment&quot; &quot;Biobase&quot; &quot;MatrixGenerics&quot; &quot;matrixStats&quot; ## [37] &quot;Seurat&quot; &quot;SeuratObject&quot; &quot;sp&quot; &quot;rtracklayer&quot; &quot;GenomicRanges&quot; &quot;GenomeInfoDb&quot; ## [43] &quot;IRanges&quot; &quot;S4Vectors&quot; &quot;BiocGenerics&quot; &quot;stats4&quot; &quot;stats&quot; &quot;graphics&quot; ## [49] &quot;grDevices&quot; &quot;utils&quot; &quot;datasets&quot; &quot;methods&quot; &quot;base&quot; lapply(c(&quot;dplyr&quot;,&quot;Seurat&quot;,&quot;HGNChelper&quot;), library, character.only = T) ## [[1]] ## [1] &quot;data.tree&quot; &quot;igraph&quot; &quot;ggraph&quot; &quot;SeuratWrappers&quot; &quot;monocle3&quot; &quot;ROCR&quot; ## [7] &quot;KernSmooth&quot; &quot;parallel&quot; &quot;fields&quot; &quot;viridisLite&quot; &quot;spam&quot; &quot;lubridate&quot; ## [13] &quot;forcats&quot; &quot;dplyr&quot; &quot;purrr&quot; &quot;readr&quot; &quot;tidyr&quot; &quot;tibble&quot; ## [19] &quot;ggplot2&quot; &quot;tidyverse&quot; &quot;patchwork&quot; &quot;grid&quot; &quot;cowplot&quot; &quot;stringr&quot; ## [25] &quot;DoubletFinder&quot; &quot;celda&quot; &quot;Matrix&quot; &quot;BiocParallel&quot; &quot;data.table&quot; &quot;gridExtra&quot; ## [31] &quot;DropletUtils&quot; &quot;SingleCellExperiment&quot; &quot;SummarizedExperiment&quot; &quot;Biobase&quot; &quot;MatrixGenerics&quot; &quot;matrixStats&quot; ## [37] &quot;Seurat&quot; &quot;SeuratObject&quot; &quot;sp&quot; &quot;rtracklayer&quot; &quot;GenomicRanges&quot; &quot;GenomeInfoDb&quot; ## [43] &quot;IRanges&quot; &quot;S4Vectors&quot; &quot;BiocGenerics&quot; &quot;stats4&quot; &quot;stats&quot; &quot;graphics&quot; ## [49] &quot;grDevices&quot; &quot;utils&quot; &quot;datasets&quot; &quot;methods&quot; &quot;base&quot; ## ## [[2]] ## [1] &quot;data.tree&quot; &quot;igraph&quot; &quot;ggraph&quot; &quot;SeuratWrappers&quot; &quot;monocle3&quot; &quot;ROCR&quot; ## [7] &quot;KernSmooth&quot; &quot;parallel&quot; &quot;fields&quot; &quot;viridisLite&quot; &quot;spam&quot; &quot;lubridate&quot; ## [13] &quot;forcats&quot; &quot;dplyr&quot; &quot;purrr&quot; &quot;readr&quot; &quot;tidyr&quot; &quot;tibble&quot; ## [19] &quot;ggplot2&quot; &quot;tidyverse&quot; &quot;patchwork&quot; &quot;grid&quot; &quot;cowplot&quot; &quot;stringr&quot; ## [25] &quot;DoubletFinder&quot; &quot;celda&quot; &quot;Matrix&quot; &quot;BiocParallel&quot; &quot;data.table&quot; &quot;gridExtra&quot; ## [31] &quot;DropletUtils&quot; &quot;SingleCellExperiment&quot; &quot;SummarizedExperiment&quot; &quot;Biobase&quot; &quot;MatrixGenerics&quot; &quot;matrixStats&quot; ## [37] &quot;Seurat&quot; &quot;SeuratObject&quot; &quot;sp&quot; &quot;rtracklayer&quot; &quot;GenomicRanges&quot; &quot;GenomeInfoDb&quot; ## [43] &quot;IRanges&quot; &quot;S4Vectors&quot; &quot;BiocGenerics&quot; &quot;stats4&quot; &quot;stats&quot; &quot;graphics&quot; ## [49] &quot;grDevices&quot; &quot;utils&quot; &quot;datasets&quot; &quot;methods&quot; &quot;base&quot; ## ## [[3]] ## [1] &quot;HGNChelper&quot; &quot;data.tree&quot; &quot;igraph&quot; &quot;ggraph&quot; &quot;SeuratWrappers&quot; &quot;monocle3&quot; ## [7] &quot;ROCR&quot; &quot;KernSmooth&quot; &quot;parallel&quot; &quot;fields&quot; &quot;viridisLite&quot; &quot;spam&quot; ## [13] &quot;lubridate&quot; &quot;forcats&quot; &quot;dplyr&quot; &quot;purrr&quot; &quot;readr&quot; &quot;tidyr&quot; ## [19] &quot;tibble&quot; &quot;ggplot2&quot; &quot;tidyverse&quot; &quot;patchwork&quot; &quot;grid&quot; &quot;cowplot&quot; ## [25] &quot;stringr&quot; &quot;DoubletFinder&quot; &quot;celda&quot; &quot;Matrix&quot; &quot;BiocParallel&quot; &quot;data.table&quot; ## [31] &quot;gridExtra&quot; &quot;DropletUtils&quot; &quot;SingleCellExperiment&quot; &quot;SummarizedExperiment&quot; &quot;Biobase&quot; &quot;MatrixGenerics&quot; ## [37] &quot;matrixStats&quot; &quot;Seurat&quot; &quot;SeuratObject&quot; &quot;sp&quot; &quot;rtracklayer&quot; &quot;GenomicRanges&quot; ## [43] &quot;GenomeInfoDb&quot; &quot;IRanges&quot; &quot;S4Vectors&quot; &quot;BiocGenerics&quot; &quot;stats4&quot; &quot;stats&quot; ## [49] &quot;graphics&quot; &quot;grDevices&quot; &quot;utils&quot; &quot;datasets&quot; &quot;methods&quot; &quot;base&quot; # load gene set preparation function source(&quot;https://raw.githubusercontent.com/IanevskiAleksandr/sc-type/master/R/gene_sets_prepare.R&quot;) # load cell type annotation function source(&quot;https://raw.githubusercontent.com/IanevskiAleksandr/sc-type/master/R/sctype_score_.R&quot;) #### # define functions perform_sctype_analysis &lt;- function(seurat_obj, db_, tissue, gs_removal_list = c(), metadat_col_prefix = &quot;db_prefix&quot;, figure_prefix =&quot;fig_name&quot; , cluster_res = &quot;RNA_snn_res.0.9&quot;, output_file = &quot;&quot;) { # Prepare gene sets gs_list &lt;- gene_sets_prepare(db_, tissue) # Remove specified gene sets for (gs in gs_removal_list) { gs_list[[&quot;gs_positive&quot;]][[gs]] &lt;- NULL } # Calculate sctype scores es.max &lt;- sctype_score(scRNAseqData = seurat_obj@assays$RNA$scale.data, scaled = TRUE, gs = gs_list$gs_positive, gs2 = gs_list$gs_negative) # Set identities in Seurat object Idents(seurat_obj) &lt;- cluster_res # Merge by cluster cL_results &lt;- do.call(&quot;rbind&quot;, lapply(unique(seurat_obj@meta.data[[cluster_res]]), function(cl) { es.max.cl &lt;- sort(rowSums(es.max[, rownames(seurat_obj@meta.data[seurat_obj@meta.data[[cluster_res]] == cl, ])]), decreasing = TRUE) head(data.frame(cluster = cl, type = names(es.max.cl), scores = es.max.cl, ncells = sum(seurat_obj@meta.data[[cluster_res]] == cl)), 10) })) sctype_scores &lt;- cL_results %&gt;% group_by(cluster) %&gt;% top_n(n = 1, wt = scores) # Set low-confident clusters to &quot;Unknown&quot; sctype_scores$scores &lt;- as.numeric(sctype_scores$scores) sctype_scores$type[sctype_scores$scores &lt; sctype_scores$ncells / 4] &lt;- &quot;Unknown&quot; print(sctype_scores[, 1:3]) # Overlay the labels seurat_obj@meta.data[[metadat_col_prefix]] &lt;- &quot;&quot; for (j in unique(sctype_scores$cluster)) { cl_type &lt;- sctype_scores[sctype_scores$cluster == j,] seurat_obj@meta.data[[metadat_col_prefix]][seurat_obj@meta.data[[cluster_res]] == j] &lt;- as.character(cl_type$type[1]) } # Plotting pclass &lt;- DimPlot(seurat_obj, reduction = &quot;umap&quot;, label = TRUE, repel = TRUE, group.by = metadat_col_prefix) print(pclass) # Save the plot to a PDF pdf(file = paste0(figure_prefix, &quot;_&quot;, metadat_col_prefix, &quot;_sctype_genes.pdf&quot;), width = 8, height = 8) print(pclass + ggtitle(figure_prefix)) dev.off() # Save the updated Seurat object to an RDS file if (output_file != &quot;&quot;) { saveRDS(seurat_obj, file = paste0(output_file, &quot;.rds&quot;)) } # Return the updated Seurat object return(seurat_obj) } # Define variables db_ = &quot;https://raw.githubusercontent.com/IanevskiAleksandr/sc-type/master/ScTypeDB_full.xlsx&quot;; # this is a defualt databse from sctype tissue &lt;- &quot;Brain&quot; gs_removal_list &lt;- c(&quot;Tanycytes&quot;) # list of cell types from the db to remove seu_obj &lt;- perform_sctype_analysis(seu_obj, db_, tissue, gs_removal_list, metadat_col_prefix =&quot;sctype_db&quot;, figure_prefix = &quot;Day_55&quot;, output_file = &quot;Day_55&quot;, cluster_res = &quot;RNA_snn_res.0.9&quot;) ## # A tibble: 8 × 3 ## # Groups: cluster [8] ## cluster type scores ## &lt;fct&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 2 Immature neurons 81.3 ## 2 7 Myelinating Schwann cells 7.18 ## 3 0 Mature neurons 108. ## 4 6 Mature neurons 37.4 ## 5 3 Radial glial cells 85.1 ## 6 4 GABAergic neurons 82.8 ## 7 5 Radial glial cells 92.0 ## 8 1 Radial glial cells 94.0 Sctype gives us some indication of which cell types we have in our data. We can use the DE genes to get some more specific info. Glutatergic Neuronal Markers “SLC17A7”,“SLC17A6”,“GRIN1”,“GRIN2B” are all DE in cluster 0 - the mature neuron cluster. This suggests these cells are indeed glutamatergic neurons. # markers for FeaturePlot(seu_obj, features = c(&quot;SLC17A7&quot;,&quot;SLC17A6&quot;,&quot;GRIN1&quot;,&quot;GRIN2B&quot;)) ## Change the names of ScType DF to Glutatertergic neurons in metadat seu_obj@meta.data$sctype_db &lt;- gsub(&quot;Mature neurons&quot;, &quot;Glutamatergic neurons&quot;, seu_obj@meta.data$sctype_db) We can now plot the UMAP to ensure we have update the metadata correctly DimPlot(seu_obj, group.by = &quot;sctype_db&quot;) | DimPlot(seu_obj, reduction =&quot;umap_iso&quot;, group.by = &quot;sctype_db&quot;) It is possible to explore the radial glial cells in more detail as there are likely more subtypes of radial glial cells in this data set. For the purposes of the tutorial we will leave this annoation as is. Based on this we have 5 main cell types. Radial glial cells Immature neurons Glutamatergic neurons GABAergic neuorns 5.3 plotting trajectories 5.4 Finding isofrms of interest 5.5 5.6 plotting with ditoplot "],["citations-and-session-info.html", "Chapter 6 Citations and Session info 6.1 Citations 6.2 Session info", " Chapter 6 Citations and Session info 6.1 Citations 6.2 Session info ## R version 4.4.0 (2024-04-24) ## Platform: x86_64-pc-linux-gnu ## Running under: Red Hat Enterprise Linux 9.4 (Plow) ## ## Matrix products: default ## BLAS/LAPACK: FlexiBLAS OPENBLAS; LAPACK version 3.10.1 ## ## locale: ## [1] LC_CTYPE=en_AU.UTF-8 LC_NUMERIC=C LC_TIME=en_AU.UTF-8 LC_COLLATE=en_AU.UTF-8 LC_MONETARY=en_AU.UTF-8 ## [6] LC_MESSAGES=en_AU.UTF-8 LC_PAPER=en_AU.UTF-8 LC_NAME=C LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=en_AU.UTF-8 LC_IDENTIFICATION=C ## ## time zone: Australia/Melbourne ## tzcode source: system (glibc) ## ## attached base packages: ## [1] parallel grid stats4 stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] HGNChelper_0.8.14 data.tree_1.1.0 igraph_2.1.1 ggraph_2.2.1 SeuratWrappers_0.3.5 ## [6] monocle3_1.3.7 ROCR_1.0-11 KernSmooth_2.23-24 fields_16.2 viridisLite_0.4.2 ## [11] spam_2.10-0 lubridate_1.9.3 forcats_1.0.0 dplyr_1.1.4 purrr_1.0.2 ## [16] readr_2.1.5 tidyr_1.3.1 tibble_3.2.1 ggplot2_3.5.1 tidyverse_2.0.0 ## [21] patchwork_1.3.0 cowplot_1.1.3 stringr_1.5.1 DoubletFinder_2.0.4 celda_1.20.0 ## [26] Matrix_1.7-1 BiocParallel_1.40.0 data.table_1.16.2 gridExtra_2.3 DropletUtils_1.26.0 ## [31] SingleCellExperiment_1.28.0 SummarizedExperiment_1.36.0 Biobase_2.66.0 MatrixGenerics_1.18.0 matrixStats_1.4.1 ## [36] Seurat_5.1.0 SeuratObject_5.0.2 sp_2.1-4 rtracklayer_1.64.0 GenomicRanges_1.58.0 ## [41] GenomeInfoDb_1.42.0 IRanges_2.40.0 S4Vectors_0.44.0 BiocGenerics_0.52.0 ## ## loaded via a namespace (and not attached): ## [1] spatstat.sparse_3.1-0 bitops_1.0-9 httr_1.4.7 RColorBrewer_1.1-3 doParallel_1.0.17 ## [6] tools_4.4.0 sctransform_0.4.1 utf8_1.2.4 R6_2.5.1 HDF5Array_1.34.0 ## [11] mgcv_1.9-1 lazyeval_0.2.2 uwot_0.2.2 rhdf5filters_1.18.0 withr_3.0.2 ## [16] progressr_0.15.0 cli_3.6.3 spatstat.explore_3.3-1 fastDummies_1.7.4 enrichR_3.2 ## [21] labeling_0.4.3 sass_0.4.9 spatstat.data_3.1-2 ggridges_0.5.6 pbapply_1.7-2 ## [26] Rsamtools_2.20.0 R.utils_2.12.3 scater_1.34.0 parallelly_1.38.0 WriteXLS_6.7.0 ## [31] maps_3.4.2 limma_3.62.1 rstudioapi_0.15.0 FNN_1.1.4.1 generics_0.1.3 ## [36] BiocIO_1.16.0 combinat_0.0-8 ica_1.0-3 spatstat.random_3.3-1 zip_2.3.0 ## [41] ggbeeswarm_0.7.2 fansi_1.0.6 abind_1.4-8 R.methodsS3_1.8.2 lifecycle_1.0.4 ## [46] yaml_2.3.10 edgeR_4.4.0 rhdf5_2.50.0 SparseArray_1.6.0 Rtsne_0.17 ## [51] promises_1.3.0 dqrng_0.4.1 crayon_1.5.3 miniUI_0.1.1.1 lattice_0.22-6 ## [56] beachmat_2.22.0 pillar_1.9.0 knitr_1.48 rjson_0.2.23 boot_1.3-31 ## [61] future.apply_1.11.3 codetools_0.2-20 leiden_0.4.3.1 glue_1.8.0 spatstat.univar_3.0-0 ## [66] remotes_2.5.0 vctrs_0.6.5 png_0.1-8 gtable_0.3.6 cachem_1.1.0 ## [71] openxlsx_4.2.6.1 xfun_0.49 S4Arrays_1.6.0 mime_0.12 tidygraph_1.3.1 ## [76] RcppEigen_0.3.4.0.2 survival_3.7-0 iterators_1.0.14 statmod_1.5.0 fitdistrplus_1.2-1 ## [81] nlme_3.1-166 RcppAnnoy_0.0.22 bslib_0.8.0 irlba_2.3.5.1 vipor_0.4.7 ## [86] splitstackshape_1.4.8 colorspace_2.1-1 ggrastr_1.0.2 tidyselect_1.2.1 compiler_4.4.0 ## [91] curl_6.0.0 BiocNeighbors_2.0.0 DelayedArray_0.32.0 plotly_4.10.4 bookdown_0.41 ## [96] scales_1.3.0 lmtest_0.9-40 digest_0.6.37 goftest_1.2-3 presto_1.0.0 ## [101] spatstat.utils_3.1-1 minqa_1.2.8 rmarkdown_2.29 XVector_0.46.0 htmltools_0.5.8.1 ## [106] pkgconfig_2.0.3 lme4_1.1-35.5 sparseMatrixStats_1.18.0 highr_0.11 fastmap_1.2.0 ## [111] rlang_1.1.4 htmlwidgets_1.6.4 UCSC.utils_1.2.0 shiny_1.9.1 DelayedMatrixStats_1.28.0 ## [116] farver_2.1.2 jquerylib_0.1.4 zoo_1.8-12 jsonlite_1.8.9 R.oo_1.27.0 ## [121] BiocSingular_1.22.0 RCurl_1.98-1.16 magrittr_2.0.3 scuttle_1.16.0 GenomeInfoDbData_1.2.13 ## [126] dotCall64_1.2 Rhdf5lib_1.28.0 munsell_0.5.1 Rcpp_1.0.13-1 viridis_0.6.5 ## [131] reticulate_1.39.0 stringi_1.8.4 MCMCprecision_0.4.0 zlibbioc_1.52.0 MASS_7.3-61 ## [136] plyr_1.8.9 listenv_0.9.1 ggrepel_0.9.6 deldir_2.0-4 graphlayouts_1.2.0 ## [141] Biostrings_2.72.1 splines_4.4.0 tensor_1.5 hms_1.1.3 locfit_1.5-9.10 ## [146] spatstat.geom_3.3-2 RcppHNSW_0.6.0 ScaledMatrix_1.14.0 reshape2_1.4.4 XML_3.99-0.17 ## [151] evaluate_1.0.1 BiocManager_1.30.25 tweenr_2.0.3 nloptr_2.1.1 tzdb_0.4.0 ## [156] foreach_1.5.2 httpuv_1.6.15 RANN_2.6.2 polyclip_1.10-7 future_1.34.0 ## [161] scattermore_1.2 ggforce_0.4.2 rsvd_1.0.5 xtable_1.8-4 restfulr_0.0.15 ## [166] RSpectra_0.16-2 later_1.3.2 memoise_2.0.1 beeswarm_0.4.0 GenomicAlignments_1.40.0 ## [171] cluster_2.1.6 timechange_0.3.0 globals_0.16.3 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
